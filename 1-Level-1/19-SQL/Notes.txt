



s/w
------------------------------------

	application   +  data-source
	
	
		application  ==> processing logic
		data-source  ==> persisting logic
	
	
		data-source(s)
		
			- file
			- relational/table/SQL 
			- No-SQL ( document , key-value , graph .. )
			.....

-----------------------------------------------------			
		
		Application  	
			--> object model
		SQL-data-source
			--> relational model
			
--------------------------------------------------------

  ORM ( Object Relation Mapping ) 

    how to do ORM in java ?
    
    	 using
    		==> JDBC API ( java.sql .* )


--------------------------------------------------------
basic steps to use 'jdbc Api'
--------------------------------------------------------


 step-1 : register/install 'jdbc-driver' with jdbc API
 step-2 : create connection with db-server using url,user & password
 
 step-3 : create jdbc-statements with SQL
 step-4 : execute statements & process results
 
 step-5 : handle SQLExceptions
 step-6 : handle txns ( commit or roolback )
 
 step-7 : release connection
 
 -----------------------------------------------------------


 
 	- layer(s)
 	
 		1. service layer ==> processing logic
 		2. data/repository layer ==> persisting logic
 		
 		
 how to separate data-accessing-code from data-processing code ?
 
 	using 'DAO'(Data Accessing Object)/ Repository pattern			





design & performance issues with JDBC API
-----------------------------------------

	-> connection management is manual
	-> too much boiler-plate/duplicate code
	-> relationship between entities should manage manually
	-> code partialy depends RDBMS product
	-> no cache support for frequent data
	-> All exceptions are 'checked' exception
	....
	
	
	
	
	ORM Frameworks
	------------------
	
	JPA ( Java Persistent API )
	
		 Hibernate   ==> jboss community   ( most popular )
		 Toplink     ==> oracle
		 Eclipselink ==> eclipse community
		 iBatis      ==> Apache
	 
	
	
	
	------------------------------------------------
	
	
	JEE
	
		- servlet
		- JSP
	
	----------------------------------------------
	
	Spring F.W
	
		- boot
		- core
		- web
		- data
		- security
		- batch
		..		
	
	-----------------------------------------------
	
	REST api
	
	Microservices
	
		- spring cloud

	------------------------------------------------
	
	
	Front-End
	
		- HTML
		- CSS
		- Javascript ==> ES6 & ES7
		
		 F.Ws
		 
		 	- Angular
		 	- React
		 	
		 		-> web - UI
		 		
		 	- Ionic				
	
				-> mobile UI
	-----------------------------------------------
	
	Dev-Ops
	
	Tools
	
		-> Maven
		-> Git
		-> jenkins			
		-> docker
		-> kubernetes
	
	
	
	
	

			
				
				
							
	