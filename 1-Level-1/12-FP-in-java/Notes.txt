

---------------------------------------------------------------

why FP ?

	==> declarative coding style ( always separate 'What' ( your app ) logic from 'How' ( Lib ) logic 
	==> clean & concise code
	==> higher-order-programming
	==> Lazy computations
	
	
---------------------------------------------------------------	



How to define function in java ?


 ==> with any 'functional-interface' type & using Lambda syntax



e.g

Predicate<Product> byPrice = new Predicate<Product>() {
								@Override
								public boolean test(Product t) {
									return t.getPrice() >= minPrice && t.getPrice() <= maxPrice;
								}
							};
					|
					|
					|
					|
					|
					V
					
Predicate<Product> byPrice = public boolean test(Product t) {
									return t.getPrice() >= minPrice && t.getPrice() <= maxPrice;
								}
					|
					|
					|
					|
					|
					V		
Predicate<Product> byPrice =  boolean test(Product t) {
									return t.getPrice() >= minPrice && t.getPrice() <= maxPrice;
								}
					|
					|
					|
					|
					|
					V		

Predicate<Product> byPrice =   test(Product t) {
									return t.getPrice() >= minPrice && t.getPrice() <= maxPrice;
								}
					|
					|
					|
					|
					|
					V		
					
Predicate<Product> byPrice =   (Product t) {
									return t.getPrice() >= minPrice && t.getPrice() <= maxPrice;
								}
					|
					|
					|
					|
					|
					V		
					
					
------------------------------------------------------					
from java-8, below syntax is valif function syntax					
------------------------------------------------------

Predicate<Product> byPrice =   (Product t) -> {
									return t.getPrice() >= minPrice && t.getPrice() <= maxPrice;
								}
					-or-
						
Predicate<Product> byPrice =   (t) -> {
									return t.getPrice() >= minPrice && t.getPrice() <= maxPrice;
								}
					-or-
						
Predicate<Product> byPrice =   t -> {
									return t.getPrice() >= minPrice && t.getPrice() <= maxPrice;
								}			
								
					-or-
						
Predicate<Product> byPrice =   t ->  t.getPrice() >= minPrice && t.getPrice() <= maxPrice;
												
							
							